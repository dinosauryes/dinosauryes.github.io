{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://dinosauryes.github.io","root":"/"},"pages":[],"posts":[{"title":"区块链学习","slug":"区块链学习","date":"2021-04-26T11:20:44.000Z","updated":"2021-04-26T14:59:27.364Z","comments":true,"path":"2021/04/26/区块链学习/","link":"","permalink":"http://dinosauryes.github.io/2021/04/26/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0/","excerpt":"2021华为区块链高校大赛","text":"2021华为区块链高校大赛","categories":[],"tags":[{"name":"区块链","slug":"区块链","permalink":"http://dinosauryes.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"}]},{"title":"","slug":"JAVA基础学习","date":"2021-04-13T07:37:23.657Z","updated":"2021-05-18T13:38:06.139Z","comments":true,"path":"2021/04/13/JAVA基础学习/","link":"","permalink":"http://dinosauryes.github.io/2021/04/13/JAVA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/","excerpt":"title: JAVA基础学习date: 2021-04-13 15:37:23tags: JAVA 岁月悠悠 衰微只及肌肤，热忱抛却 颓废必至灵魂。","text":"title: JAVA基础学习date: 2021-04-13 15:37:23tags: JAVA 岁月悠悠 衰微只及肌肤，热忱抛却 颓废必至灵魂。 面向对象 面向过程：当需要实现一个功能时，每一个具体的步骤都要亲力亲为，详细处理每一个细节 面向对象：当需要实现一个功能时，不关心具体的步骤，而是找一个以及具有该功能的，来帮我做 1234567891011121314151617import java.util.Arrays;public class main &#123; public static void main(String[] args) &#123; int[] array = &#123;1, 2, 3, 4, 5&#125;; System.out.print(&quot;[&quot;);//面向过程 for (int i = 0; i &lt; array.length; i++) &#123; if (i == array.length - 1) &#123; System.out.print(array[i] + &quot;]&quot;); &#125; else &#123; System.out.print(array[i] + &quot;,&quot;); &#125; &#125; System.out.println(&quot;========&quot;); System.out.println(Arrays.toString(array));//面向对象 &#125;&#125; 特点：面向对象符合我们思考习惯，可将复杂的事情简单化，并将我们从执行者变为指挥者，面向对象的语言中包含了三大基本特征，封装，继承，多态 常量何为常量：程序运行期间固定不变的量。 常量的分类：​ 1.字符串常量：用“ “引起来的部分，eg：”HelloWorld”（双引号中可为空） ​ 2.整型常量：数字，无小数点，eg：100，-200，0 ​ 3.浮点数常量 : 数字，有小数点，eg：3.14，-56.00 ​ 4.字符常量：用’’引起来的部分，eg：’A’,’B’,’泽’（双引号中不为空）（java中允许使用中文字符） ​ 5.布尔常量：仅两种true,false ​ 6.空常量：null，代表没有任何数据。 数据类型基本数据类型整数型 byte short int long 浮点型 float double (近似值而非精确值) 字符型 char 布尔型 boolean 数据类型 关键字 内存占用 取值范围 字节型 byte 1字节 -128~127 短整型 short 2字节 -32768~32767 整形 int（默认类型） 4字节 -231~231-1 长整型 long 8字节 -263~263-1 单精度浮点数 float 4字节 1.4013E-45~3.4028E+38 双精度浮点数 double（默认类型） 8字节 4.9E-324~1.7977E+308 字符型 char 2字节 0~65535 布尔类型 boolean 1字节 true,false 注意事项： 1.数据范围与字节数不一定相关 2.浮点数当中默认类型是double。如果使用float类型，需要加上后缀F 3.整数中默认类型是int。如果一定要使用long类型，需要加上后缀L 引用数据类型字符串，数组，类，接口，Lambda 数据类型转换自动转换：特点：代码不需要特殊处理，自动完成 规则：数据范围从小到大 强制数类型转换：特点：代码需要特殊格式处理，不能自动完成 格式：1范围小的类型 范围小的变量名 &#x3D; （范围小的类型） 原本范围大的类型 注意事项：1.强制类型转换不推荐使用，可能发生精度损失和数据溢出 12int num = (int) 6000000000L;System.out.println(num);// 1705032704 2.byte/short/char类型都可以发生数学运算 12char zifu = &#x27;A&#x27;;System.out.println(zifu + 1);// 66 3.byte/short/char类型运算时，首先提升成为int类型，再计算 4.Boolean类型不能发生数据类型转换 ASCII表： ASCII值 控制字符 48 0 65 A 97 a 变量何为变量：程序运行期间，可以改变的量 注意事项：1.如果创建多个变量，那么变量之间的名称不可以重复 2.对于float和long类型来说字母后缀F和L不要丢掉 3.如果使用byte和short类型的变量，右侧数据值范围不能超过左侧类型的范围 4.变量需要先赋值才能使用 5.变量使用不能超过作用域的范围 类定义类 成员变量是直接定义在类中，在方法外面 成员方法不要写static关键字 对象的创建及其使用 ​ 通常情况下，一个类不能直接使用，需要创建一个对象才能使用 导包：指出所需要的类在什么位置 1import 包名称.类名称; ​ 对于和当前类属于同一个包的情况，可以省略导包语句不写 创建 1类名称 对象名 = new 类名称(); 使用 使用成员变量：对象名.成员变量名 使用成员方法：对象名.成员方法名() 注意事项：如果成员变量没有赋值会有一个初始值，规则和数组一样 类与对象的关系 类是对一类事物的描述，是抽象的 对象是一类对象的实例，是具体的 类是对象的模板，对象是类的实例 方法何为方法：将一个功能抽取出来，定义在一个大括号内，形成一个单独的功能。需要这个功能时，进行调用，实现了代码的复用性。 定义格式：1234修饰符 返回值类型 方法名称 （参数类型 参数名称,...）&#123; 方法体 return 返回值;&#125; return1.停止当前方法 2.将后面的返回值还给调用处 3.return后面的返回值要与 返回值类型 保持一致 4.对于有返回值的方法，可以使用单独调用，打印调用和赋值调用 5.对于无返回值的方法，只能进行单独调用 6.对于一个void没有返回值的方法，不能写return后面的返回值，只能写return自己 7.无返回值，对于方法当中最后一行的return可以省略不写 8.一个方法中可以有多个return语句，但是必须保证同时只有一个会被执行 注意事项：1.方法定义的先后顺序无所谓 2.方法定义不能产生嵌套包含关系 3.方法执行需要调用 调用格式：123方法名称（参数）;System.out.println(方法名称（参数）)数据类型 变量名称 = 方法名称（参数） 重载（OverLoad）多个方法的名称一样，但参数列表不一样 方法重载相关因素： 1.参数个数 2.参数类型 3.参数的多类型顺序 方法重载无关因素： 1.参数名称 2.方法的返回值类型 数组可以同时存放多个数据值 特点： 1.数组是一种引用数据类型 2.数据当中的多个数据，类型必须统一 3.数组的长度在程序运行期间不能改变 初始化方式： 1.动态初始化（指定长度） 1数据类型[] 数组名称 = new 数据类型[数组长度]; 2.静态初始化（指定内容） 12数据类型[] 数组名称 = new 数据类型[] &#123;元素1,元素2..&#125;;数据类型[] 数组名称 = &#123;元素1,元素2..&#125;; 注意事项 1.有new可以拆分成两个步骤 12int[] array;array = new int[] &#123;11,23,21&#125;; 2.静态初始化省略格式不能拆分成两个步骤 3.若不确定数组当中的具体内容，用动态初始化，反之则用静态初始化 使用数组中的元素 1.直接打印数组名称，得到的是数组对应的内存地址哈希值 2.访问数组元素的格式 数组名称[索引值]（从0开始） 3.使用动态初始化数组时，其中的元素会自动拥有一个默认值 如果为整数类型，默认值为0 如果为浮点类型，默认值为0.0 如果为字符类型，默认为‘\\u0000’ 如果为布尔类型，默认为false 如果为引用类型，默认为null 数组异常 数组索引越界异常 空指针异常(没new创建) 获取数组的长度 1int xxx = 数组名称.length; 得到一个int数字，代表数组的长度 数组一旦创建，程序运行期间长度不可改变 12345eg：int[] array = new int[3];System.out.println(array.length);//3array = new int[5];System.out.println(array.length);//5 数组的遍历输出 概念：对数组中的每个元素进行逐一处理(使用循环与数组长度) 1234for (int i = 0; i &lt; 数组名.length; i++) &#123; &#125;//快捷码：数组名.length.fori 数组作为方法的参数时，传递进去的是数组的地址 数组作为方法的返回值时，返回的是数组地址 判断语句单if123if(关系表达式)&#123; 语句体;&#125; if - - else12345if(关系表达式) &#123; 语句体1;&#125;else&#123; 语句体2;&#125; 多if - - else1234567891011if (判断条件1) &#123; 执行语句1;&#125; else if (判断条件2)&#123; 执行语句2;&#125; ...&#125; else if (判断条件n) &#123; 执行语句n;&#125; else &#123; 执行语句n+1;&#125; 选择语句switch语句格式123456789101112switch(表达式)&#123; case 常量值1: 语句体1; break; case 常量值2: 语句体2; break; ... default: 语句体n+1; break;&#125; switch注意事项1.多个case后面的数值不可以重复 2.swich后面的小括号中只能是： 基本数据类型：byte/short/char/int 引用数据类型：String字符串，enum枚举 3.switch语句前后顺序可以颠倒，且break语句可以省略（匹配到case后从当前位置向下执行，直到遇到break或default） 循环语句1.初始化语句：在循环开始最初执行，并且只能做唯一一次。 2.条件判断：若成立，循环继续；反之则跳出循环。 3.循环体：重复要做的事情内容，若干行语句。 4.布进语句：每次循环之后的扫尾工作。 for循环123for (初始表达式; 布尔表达式; 步进表达式)&#123; 循环体；&#125; while循环while格式12345初始化语句;while (条件判断)&#123; 循环体; 步进语句;&#125; do - - while 循环do - - while 格式12345初始化语句do &#123; 循环体 步进语句&#125; while (条件判断); 三种循环的区别1.若条件判断从未满足，for和while循环执行0次，do-while循环至少执行一次 2.for循环的变量在小括号中定义，仅能在循环中使用。while循环和do-while循环初始化语句在括号外，循环结束后可以继续使用 3.凡是次数确定的场景多用for循环，否则用while循环 break关键字1.可以用在switch语句中，一旦执行，整个switch语句立刻结束 2.可以用在循环语句中，一旦执行，整个循环语句立刻结束，打断循环 continue关键字1.一旦执行，立刻跳过当前次循环内容，马上开始下一次循环 JAVA的内存划分1**.栈(Stack)：存放方法中的局部变量，运行方法一定要在栈中** ​ 局部变量：{}内的变量，一旦超出作用域，立刻从栈内存中消失 2.堆(Heap)：new出来的，在堆内存 ​ 堆内存里的东西都有一个地址值：16进制 ​ 堆内存里面的数据，都有默认值： ​ 若为整数 默认为0 ​ 若为浮点数 默认为0.0 ​ 若为字符 默认为‘\\u0000’ ​ 若为布尔 默认为false ​ 若为引用类型 默认为null 3.方法区(Method Area)：存储.class相关信息，包含方法的信息 4.本地方法栈(Native Method Stack)：与操作系统相关 5.寄存器(pc Register)：与CPU相关 IDEA常用快捷键 快捷键 功能 Alt+Enter 导入包，自动修正代码 Ctrl+Y 删除光标所在行 Ctrl+D 复制光标所在行内容，插入光标位置下面 Ctrl+Alt+L 格式化代码（使代码变工整） Ctrl+Shift+/ 多行注释，再按取消注释 Ctrl+/ 单行注释，再按取消注释 Alt+Ins 自动生成代码，toString,get,set等方法 Alt+Shift+上下箭头 移动当前代码行 Shift+F6 改变与之有关的所有参数名 快捷键 功能 Ctrl+方法名右键 查看方法源代码 Shift+F6 重命名光标所在的局部变量 IDEA常用快捷代码 x.fori for(int i = 0; i &lt; 5; i++) pswm public static void main(String args) sout System.out.println()","categories":[],"tags":[]},{"title":"记录Hexo博客的创建","slug":"记录Hexo博客的创建","date":"2021-01-06T02:15:14.000Z","updated":"2021-01-07T11:30:23.897Z","comments":true,"path":"2021/01/06/记录Hexo博客的创建/","link":"","permalink":"http://dinosauryes.github.io/2021/01/06/%E8%AE%B0%E5%BD%95Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA/","excerpt":"​ 经历了数次失败，现开门见山的讲述使用Github 和 Hexo 搭建属于自己的博客","text":"​ 经历了数次失败，现开门见山的讲述使用Github 和 Hexo 搭建属于自己的博客 准备工作安装Node.js通过官网下载或下载学长发的安装包解压Node.js安装包即可 安装Git通过官网下载或下载学长发的安装包解压GIT安装包即可 检查GIT是否安装成功找到GIT对应文件夹 找到git-bash并打开 输入： 123git --versionnode -vnpm -v 若有提示对应的版本号，则Git安装成功！ 注册Github账号进入GitHub官网 点击 sign up注册账号（人机验证或许需要科学上网？可通过安装浏览器插件解决） 此时GitHub会向你的邮箱发送验证电子邮箱地址，点击确认。 创建repository点击new repository 注意repository name 是 你的github账号名.github.io 勾选Add a README file 点击creating repository.创建仓库 安装本地Hexo新建文件夹首先在你想要在本地放blog的地方新建blog文件夹 并对文件夹右键 点击Git Bash Here(功能类似与cd blog) 安装hexo输入： 12npm install hexo-cli -gnpm install hexo-deployer-git --save 输入： 12rm -rf * （此语句的作用是清空当前目录下的所有东西,谨慎使用，一定要在对应的blog下。）hexo init 检验效果（预览blog）下面来检验一下效果： 12hexo ghexo s 若git提示下列代码则说明成功： 1INFO Hexo is running at http:&#x2F;&#x2F;0.0.0.0:4000&#x2F;. Press Ctrl+C to stop. 在浏览器输入 http://localhost:4000/ 查看预览效果（Ctrl+C可以关闭预览） 如果显示预览效果是 404 那么大概率是端口被占用了 再换一个端口试试看： 1hexo s -p 5000 此时本地blog就搭建好了，但只能自己访问。我们需要将blog部署到github上，来让更多人访问到我们的blog。 将hexo部署至github配置SSH密钥对blog文件夹右键，点击Git Bash Here 输入： 1ssh-keygen -t rsa -C &quot;your email@example.com&quot; 注：”your &#101;&#109;&#97;&#105;&#108;&#64;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;“ 是你的邮箱，eg: 1ssh-keygen -t rsa -C &quot;xxx@qq.com&quot; 接下来连续按三次回车，会出现一系列字符串 运行以下命令: 1clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub 将密钥保存至粘贴板 或打开.ssh/id_rsa.pub文件直接复制密钥 在github账户上添加密钥此处因没有图片 自行百度 测试是否成功输入： 1ssh -T git@github.com 接着会提示你 1Are you sure you want to continue connecting(yes&#x2F;no)? 输入yes 若提示 1Hi 你的用户名！You&#39;ve successfully.... 配置git个人信息输入： 12git config --global user.name &quot;此处填你的用户名&quot; git config --global user.email &quot;此处填你的邮箱&quot; 此时本机已经成功与github连接 将本地的 Hexo 文件更新到 Github 中修改_config.yml文件配置用编程软件打开_config.yml（记事本也可以） 我这里用的是vs 找到关键字deploy(在最下面) 注意：”：“后要空一格 1234deploy: type: git repository: git@github.com:dinosauryes&#x2F;dinosauryes.github.io.git branch: main repository比葫芦画瓢将dinosauryes改为自己的github用户名 安装deployer在命令框中输入： 12npm install hexo-deployer-git --savehexo g -d 测试在网址输入https://你的GitHub用户名.github.io 完成 心得：不要轻言放弃！！！我重新安装了三次终于成功了。岁月悠悠 衰微只及肌肤热忱抛却 颓废必至灵魂","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://dinosauryes.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-01-06T00:09:37.897Z","updated":"2021-01-06T00:09:37.897Z","comments":true,"path":"2021/01/06/hello-world/","link":"","permalink":"http://dinosauryes.github.io/2021/01/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"区块链","slug":"区块链","permalink":"http://dinosauryes.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"},{"name":"教程","slug":"教程","permalink":"http://dinosauryes.github.io/tags/%E6%95%99%E7%A8%8B/"}]}